{"/home/travis/build/npmtest/node-npmtest-grunt-modernizr/test.js":"/* istanbul instrument in package npmtest_grunt_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/lib.npmtest_grunt_modernizr.js":"/* istanbul instrument in package npmtest_grunt_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_modernizr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_modernizr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-modernizr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_modernizr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_modernizr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_modernizr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_modernizr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_modernizr.__dirname + '/lib.npmtest_grunt_modernizr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/Gruntfile.js":"module.exports = function(grunt) {\n\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Project configuration.\n  grunt.initConfig({\n    clean: [\"build\"],\n    nodeunit: {\n      files: ['test/**/*.js']\n    },\n    watch: {\n      files: '<%= jshint.files %>',\n      tasks: 'default'\n    },\n    jshint: {\n      options: {\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        boss: true,\n        eqnull: true,\n        node: true,\n        globals: {}\n      },\n      files: [\n        'Gruntfile.js',\n        'tasks/**/*.js',\n        'test/**/*.js'\n      ]\n    },\n    modernizr: {\n      dist: {\n        dest: \"build/modernizr-custom.js\"\n      }\n    }\n  });\n\n  // Load local tasks.\n  grunt.loadTasks('tasks');\n\n  // Default task.\n  grunt.registerTask('default', [\n    'jshint'//,\n    //'nodeunit' // there is no test for now, nodeunit task break if there isn't\n  ]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/postinstall.js":"// Node Script to perform the original bash command:\n//\n//     if [[ -d node_modules/modernizr ]]; then ( cd node_modules/modernizr; npm install --production; cd -; ); fi\n\nvar fs = require('fs');\nvar exec = require('child_process').exec;\n\nvar on_module_stat = function (error, stat) {\n    if (error === null) {\n        exec('cd node_modules/modernizr && npm install --production', on_install);\n    }\n};\n\nvar on_install = function (error, stdout, stderr) {\n    if (error !== null) {\n        console.error('Error executing grunt-modernizr postinstall: ' + error);\n        console.error(stderr);\n        return;\n    }\n\n    console.log('grunt-modernizr postinstall success');\n};\n\nfs.stat('node_modules/modernizr', on_module_stat);\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/lib/modernizr-dev.js":"<html>\r\n<head><title>301 Moved Permanently</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>301 Moved Permanently</h1></center>\r\n<hr><center>nginx/1.4.6 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/tasks/modernizr.js":"/*\n * grunt-modernizr\n * https://github.com/Modernizr/grunt-modernizr\n *\n * Copyright (c) 2012 Richard Herrera\n * Licensed under the MIT license.\n */\n\nmodule.exports = function (grunt) {\n\n\t// ==========================================================================\n\t// TASKS\n\t// ==========================================================================\n\n\tgrunt.registerMultiTask(\"modernizr\", \"Build out a lean, mean Modernizr machine.\", function () {\n\n\t\t// Require a config object\n\t\tthis.requiresConfig(this.name);\n\n\t\t// Async\n\t\tvar done = this.async();\n\n\t\t// The target from our multi-task\n\t\tvar target = this.target || null;\n\n\t\t// The magic\n\t\tvar customizr = require(\"customizr\");\n\t\tvar _merge = require(\"lodash.merge\");\n\t\tvar settings = _merge(this.options(), this.data);\n\n\t\t// Go!\n\t\treturn customizr(settings, done);\n\t});\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/lib/helpers/defaults.js":"(function () {\n\t\"use strict\";\n\n\t// ==========================================================================\n\t// DEFAULT CONFIG\n\t// ==========================================================================\n\tmodule.exports = {\n\n\t\t// Path to the build you're using for development.\n\t\t\"devFile\" : \"lib/modernizr-dev.js\",\n\n\t\t// Path to save out the built file\n\t\t\"outputFile\" : \"build/modernizr-custom.js\",\n\n\t\t// Based on default settings on http://modernizr.com/download/\n\t\t\"extra\" : {\n\t\t\t\"shiv\" : true,\n\t\t\t\"printshiv\" : false,\n\t\t\t\"load\" : true,\n\t\t\t\"mq\" : false,\n\t\t\t\"cssclasses\" : true\n\t\t},\n\n\t\t// Based on default settings on http://modernizr.com/download/\n\t\t\"extensibility\" : {\n\t\t\t\"addtest\" : false,\n\t\t\t\"prefixed\" : false,\n\t\t\t\"teststyles\" : false,\n\t\t\t\"testprops\" : false,\n\t\t\t\"testallprops\" : false,\n\t\t\t\"hasevents\" : false,\n\t\t\t\"prefixes\" : false,\n\t\t\t\"domprefixes\" : false\n\t\t},\n\n\t\t// By default, source is uglified before saving\n\t\t\"uglify\" : true,\n\n\t\t// Define any tests you want to impliticly include\n\t\t\"tests\" : [],\n\n\t\t// By default, will crawl your project for references to Modernizr tests\n\t\t// Set to false to disable\n\t\t\"parseFiles\" : true,\n\n\t\t// By default, this task will crawl all *.js, *.css files.\n\t\t\"files\" : {\n\t\t\t\"src\": [\n\t\t\t\t\"*[^(g|G)runt(file)?].{js,css,scss,sass}\",\n\t\t\t\t\"**[^node_modules]/**/*.{js,css,scss,sass}\",\n\t\t\t\t\"!lib/cache/**/*\",\n\t\t\t\t\"!lib/gruntifier.js\"\n\t\t\t]\n\t\t},\n\n\t\t// Set to true to attempt to match user-contributed tests\n\t\t\"matchCommunityTests\" : false,\n\n\t\t// Have custom Modernizr tests? Add them here.\n\t\t\"customTests\" : []\n\t};\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-modernizr/node_modules/grunt-modernizr/lib/helpers/private.js":"(function () {\n\t\"use strict\";\n\n\t// ==========================================================================\n\t// PRIVATE CONFIG\n\t// ==========================================================================\n\tmodule.exports = {\n\t\t\"url\" : {\n\t\t\t\"github\" : \"https://github.com/Modernizr/grunt-modernizr\",\n\t\t\t\"raw\" : \"https://raw.github.com\",\n\t\t\t\"modulizr\" : \"https://github.com/Modernizr/modernizr.com/blob/gh-pages/i/js/modulizr.js#L15-157\"\n\t\t},\n\n\t\t\"core\" : [\n\t\t\t\"canvastext\",\n\t\t\t\"csstransforms3d\",\n\t\t\t\"flexbox\",\n\t\t\t\"cssgradients\",\n\t\t\t\"opacity\",\n\t\t\t\"indexedDB\",\n\t\t\t\"backgroundsize\",\n\t\t\t\"borderimage\",\n\t\t\t\"borderradius\",\n\t\t\t\"boxshadow\",\n\t\t\t\"cssanimations\",\n\t\t\t\"csscolumns\",\n\t\t\t\"cssreflections\",\n\t\t\t\"csstransitions\",\n\t\t\t\"testallprops\",\n\t\t\t\"flexboxlegacy\",\n\t\t\t\"prefixed\",\n\t\t\t\"csstransforms\",\n\t\t\t\"mq\",\n\t\t\t\"hashchange\",\n\t\t\t\"draganddrop\",\n\t\t\t\"generatedcontent\",\n\t\t\t\"svg\",\n\t\t\t\"inlinesvg\",\n\t\t\t\"smil\",\n\t\t\t\"svgclippaths\",\n\t\t\t\"input\",\n\t\t\t\"inputtypes\",\n\t\t\t\"touch\",\n\t\t\t\"fontface\",\n\t\t\t\"testbundle\",\n\t\t\t\"respond\",\n\t\t\t\"websockets\",\n\n\t\t\t/* missing core tests */\n\t\t\t\"applicationcache\",\n\t\t\t\"audio\",\n\t\t\t\"canvas\",\n\t\t\t\"geolocation\",\n\t\t\t\"history\",\n\t\t\t\"hsla\",\n\t\t\t\"indexeddb\",\n\t\t\t\"input\",\n\t\t\t\"inputtypes\",\n\t\t\t\"localstorage\",\n\t\t\t\"multiplebgs\",\n\t\t\t\"postmessage\",\n\t\t\t\"scriptdefer\",\n\t\t\t\"sessionstorage\",\n\t\t\t\"textshadow\",\n\t\t\t\"rgba\",\n\t\t\t\"video\",\n\t\t\t\"webgl\",\n\t\t\t\"websqldatabase\",\n\t\t\t\"webworkers\"\n\t\t],\n\n\t\t\"paths\" : {\n\t\t\t\"community\" : \"Modernizr/Modernizr/87c723720a48254ae37ffd56829e32a96f5c5496/feature-detects/%s.js\"\n\t\t},\n\n\t\t\"files\" : {\n\t\t\t\"modernizr\" : \"build-files/modernizr-latest.js\",\n\t\t\t\"printshiv\" : \"build-files/html5shiv-printshiv-3.6.js\",\n\t\t\t\"load\" : \"build-files/modernizr.load.1.5.4.js\"\n\t\t}\n\t};\n}());\n"}